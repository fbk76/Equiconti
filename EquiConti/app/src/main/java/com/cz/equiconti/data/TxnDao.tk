package com.cz.equiconti.data

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.Query
import kotlinx.coroutines.flow.Flow

@Dao
interface TxnDao {

    @Insert
    suspend fun insert(txn: Txn): Long

    @Query("""
        SELECT * FROM Txn
        WHERE ownerId = :ownerId
        ORDER BY dateMillis DESC
    """)
    fun listByOwner(ownerId: Long): Flow<List<Txn>>

    @Query("""
        SELECT * FROM Txn
        WHERE ownerId = :ownerId
          AND dateMillis BETWEEN :fromMillis AND :toMillis
        ORDER BY dateMillis DESC
    """)
    fun listInRange(
        ownerId: Long,
        fromMillis: Long,
        toMillis: Long
    ): Flow<List<Txn>>

    // (opzionale) versione "una tantum" se ti serve una List immediata:
    @Query("""
        SELECT * FROM Txn
        WHERE ownerId = :ownerId
          AND dateMillis BETWEEN :fromMillis AND :toMillis
        ORDER BY dateMillis DESC
    """)
    suspend fun listInRangeOnce(
        ownerId: Long,
        fromMillis: Long,
        toMillis: Long
    ): List<Txn>

    @Query("""
        SELECT COALESCE(SUM(incomeCents - expenseCents), 0)
        FROM Txn
        WHERE ownerId = :ownerId
    """)
    suspend fun balanceForOwner(ownerId: Long): Long

    @Query("""
        SELECT COALESCE(SUM(incomeCents - expenseCents), 0)
        FROM Txn
        WHERE ownerId = :ownerId AND dateMillis < :beforeMillis
    """)
    suspend fun balanceBefore(ownerId: Long, beforeMillis: Long): Long
}
